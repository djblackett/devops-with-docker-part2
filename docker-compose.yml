version: '3.8'

services:
  backend:
    hostname: backend
    ports:
      - ":8080"
    environment:
      REQUEST_ORIGIN: http://proxy/
      REDIS_HOST: redis
      POSTGRES_HOST: db
    depends_on:
      - redis
      - db
    build: example-backend
    volumes:
      - ./example-backend/:/usr/src/app/backend
    container_name: web-backend

  frontend:
    ports:
      - ":5000"
    hostname: frontend
    environment:
      REACT_APP_BACKEND_URL: http://proxy/api/
    build:
      context: example-frontend
    volumes:
      - ./example-frontend:/usr/src/app/frontend
    container_name: web-frontend

  redis:
    image: redis:7.2.1
    container_name: redis
    hostname: redis
    restart: unless-stopped
    command: redis-server --loglevel warning
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

  db:
    image: postgres:15.4
    container_name: db
    hostname: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: postgres
    volumes:
      - ./database:/var/lib/postgresql/data


  adminer:
    container_name: adminer
    image: adminer:4.8.1
    hostname: adminer
    restart: always
    ports:
      - ":8081"

  proxy:
    image: nginx:1.25.2
    hostname: proxy
    container_name: proxy
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
    tty: true
    stdin_open: true
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"


